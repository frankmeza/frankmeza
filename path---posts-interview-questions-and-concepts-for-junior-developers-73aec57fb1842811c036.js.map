{"version":3,"sources":["webpack:///path---posts-interview-questions-and-concepts-for-junior-developers-73aec57fb1842811c036.js","webpack:///./.cache/json/posts-interview-questions-and-concepts-for-junior-developers.json"],"names":["webpackJsonp","383","module","exports","data","site","siteMetadata","title","subtitle","copyright","author","name","twitter","disqusShortname","url","markdownRemark","id","html","fields","tagSlugs","frontmatter","tags","date","description","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,0BAAAC,SAAA,yGAAAC,UAAA,gBAAAC,QAA4LC,KAAA,aAAAC,QAAA,mBAAgDC,gBAAA,GAAAC,IAAA,iCAA4DC,gBAAmBC,GAAA,yLAAAC,KAAA,m3RAA21PC,QAAqvCC,UAAA,iHAA4HC,aAAgBb,MAAA,yDAAAc,MAAA,oFAAAC,KAAA,yBAAAC,YAAA,2OAAqbC,aAAgBC,KAAA","file":"path---posts-interview-questions-and-concepts-for-junior-developers-73aec57fb1842811c036.js","sourcesContent":["webpackJsonp([277310182624144],{\n\n/***/ 383:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Frank writes about code\",\"subtitle\":\"React/React Native/Typescript Developer, Golang hobbyist, jiujitsu player, foreign language aficionado\",\"copyright\":\"© MIT License\",\"author\":{\"name\":\"Frank Meza\",\"twitter\":\"frank_says_yeah\"},\"disqusShortname\":\"\",\"url\":\"https://frankmeza.github.io/\"}},\"markdownRemark\":{\"id\":\"/Users/macmini/Documents/projects/my_blog/frankmeza/src/pages/articles/2018-05-20---interview-questions-and-concepts-for-junior-developers/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>The scenario</h1>\\n<p>You got the interview. YES!! Yes, it’s <strong>that</strong> job you <strong>really</strong> want. </p>\\n<p>Hold on, this is only step one. You still have to show up on time, know what the interviewers are asking you, demonstrate this knowledge clearly, smell good and maybe even smile a little bit before they grant you Github access to their greenfield codebase with all the newest new things you’ve been reading about at Hacker Noon between writing cover letters and filling out job applications.  </p>\\n<p>Okay, so now how to prep?</p>\\n<h2>Algorithms</h2>\\n<p>which algorithm to study? There’s a lot on the internet about nightmare algorithm questions in a job interview, but I’ve not heard anyone I personally know ever have to do this. However, I don’t see how this can hurt. If it does come up, it’s generally less important to get an algorithm ‘100% right’than it is to thinking your way through it out loud to your interviewers.  </p>\\n<ul>\\n<li>\\n<p>Do you have a project to showcase? Awesome, this is good, be prepared to talk about the underlying concepts instead of tiny implementation details</p>\\n</li>\\n<li>\\n<p>which languages to put to the front of your knowledge? show, don’t tell. If you’re just entering the field, this is less applicable. Fear not - if in doubt, say something like “Given my current level of experience with code, I feel fairly comfortable with language X, but I’ll let you be the judge by asking me any questions about the language, or using that language to talk through concepts in programming.”</p>\\n</li>\\n<li>\\n<p>when I began learning to code, it was in Ruby primarily.  </p>\\n</li>\\n</ul>\\n<p>My first job in development was at a Rails/Backbone/CoffeScript shop, which was great for me at the time. Because I didn’t have to adjust to new syntax right away, I was able to continue my learning of writing object-oriented code within such a widely known MVC framework as Rails in one seemingly unending streak of Ruby classes, and Rails controllers and serializers.  </p>\\n<p>Later, I began to read about the features and approaches of other languages and paradigms. Functional programming began to interest me quite a bit, and I began to see the advantages of typed languages. Although Ruby on Rails isn’t really the best space to take advantage of these types of approaches, I was still able to take <em>full</em> advantage of the fundamental concepts that I picked up during all that time programming within a Ruby/Rails environment.  </p>\\n<p>Eventually, I accepted an offer working with a small and tight team, whose primary stack is a mostly-functional approach to Typescript/React/React-Native/Go. This is obviously a very different tech stack than Rails/Backbone/CoffeeScript. However, I was able to leverage my experience with Ruby methods and objects and classes (as well as a few things in CoffeeScript) to learning to code using Javascript’s functional parts: <em>map</em>, <em>filter</em>, and <em>reduce</em> among them, as well as newer ES6 features such as the spread operator and fat arrow functions.  </p>\\n<h2>Think twice before going all-in on a single framework</h2>\\n<p>Yes, the job posting may have mentioned so-many-years-experience in such-and-such a framework, but we all know that frameworks serve different purposes in different types of businesses, and also go in and out of use. The question becomes more like <em>can you learn to work with a new one?</em>  </p>\\n<p>This is what potential employers want to know… <em>can you keep up?</em> Are you able to take the <em>concepts</em> of programming with you into any coding situation you may find yourself in, and only then focus on implementation/syntax?</p>\\n<blockquote>\\n<p>Solid Pseudo code knows no single syntax.</p>\\n</blockquote>\\n<p>How can you prove that you know this? with a clear explanation of the underlying mechanics, which can only come from having a solid grasp of basic concepts.</p>\\n<h3>What Are these “basic concepts?”</h3>\\n<h3>REST</h3>\\n<p><strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer\\nread about HTTP in this <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\\\">overview by Mozilla</a></p>\\n<h3>HTTP</h3>\\n<ul>\\n<li>\\n<p><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP\\\">https://developer.mozilla.org/en-US/docs/Web/HTTP</a></p>\\n</li>\\n<li>\\n<p>the protocol itself - hypertext transfer protocol.</p>\\n</li>\\n<li>\\n<p>it might sound slightly archaic to need to know this, but in no way is this true. It’s always a good idea to know how your tools work. That knowledge is key to going beyond them when you have to, in a given situation.  </p>\\n</li>\\n</ul>\\n<h4>client, server relationship -</h4>\\n<ul>\\n<li>requests, responses, codes, body, et c.</li>\\n</ul>\\n<h3>What are the clients that will use server data?</h3>\\n<ul>\\n<li>web browser, mobile device</li>\\n<li>\\n<p>what will the client do with the data?</p>\\n<ul>\\n<li>render it through html/jsx markup</li>\\n</ul>\\n</li>\\n<li>Types of server data - XML, JSON, HTML</li>\\n</ul>\\n<h4>verbs</h4>\\n<ul>\\n<li>there are many but GET, POST, PUT, (PATCH), and DELETE are the most commonly used</li>\\n<li>\\n<p>Parts of a response from http verb <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\\\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods</a></p>\\n<ul>\\n<li>headers, body, json format</li>\\n<li>authentication from where?</li>\\n</ul>\\n</li>\\n<li>explain difference between JSON and Javascript Object, keys and values</li>\\n<li>other data</li>\\n</ul>\\n<h4>Status codes http</h4>\\n<ul>\\n<li>\\n<p>2XX Success</p>\\n</li>\\n<li>\\n<p>know the differences between 200, 201, 204</p>\\n</li>\\n<li>\\n<p>3XX Redirected</p>\\n</li>\\n<li>\\n<p>maybe know 302 and 304? don’t come up too often</p>\\n</li>\\n<li>\\n<p>4XX Failure</p>\\n</li>\\n<li>\\n<p>know 400, 401, 402, 403, 404, 422</p>\\n</li>\\n<li>\\n<p>5XX Server Error</p>\\n</li>\\n<li>\\n<p>maybe 500, 501, 504</p>\\n</li>\\n<li>\\n<p><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication\\\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication</a></p>\\n</li>\\n</ul>\\n<h3>Okay so now let’s talk about Which Languages, frameworks do you know and work with? Rate yourself 1-10</h3>\\n<h3>When in doubt with language X, use js instead, and…</h3>\\n<h3>javascript is still the lingua laborum, so know it</h3>\\n<ul>\\n<li>Describe parts of a JS function</li>\\n<li>function name</li>\\n<li>params</li>\\n<li>function body</li>\\n<li>return statement, value, possibly void/undefined</li>\\n</ul>\\n<h3>Variable and function scope in JS</h3>\\n<ul>\\n<li>const, let, var (hoisted) in closures and function scope</li>\\n<li>const/let do not leave their block { }</li>\\n</ul>\\n<h4>What is closure?</h4>\\n<h4>Call, bind, apply in JS</h4>\\n<h3>describe JS objects -</h3>\\n<ul>\\n<li>Key/values</li>\\n<li>Usually string as key, but what else can be used as a key?</li>\\n</ul>\\n<h3>Technical part of interview/whiteboarding</h3>\\n<ul>\\n<li>Whiteboard - small algorithm - input int, output string of square</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">const square = (input) {\\n    const line = &quot;&quot;;\\n    for (let i = 0; i &gt;= input; i++) {\\n        line.concat(&quot;x&quot;)\\n    }\\n\\n    for (let i = 0; i &gt;= input; i++) {\\n        console.log(line + \\\\n)\\n    }\\n}</code></pre>\\n      </div>\\n<h3>Web development basics -</h3>\\n<p>http, verbs, response, request, REST what and why, status codes, </p>\\n<h3>other</h3>\\n<ul>\\n<li>CSS selectors - </li>\\n</ul>\\n<h3>React</h3>\\n<ul>\\n<li>props</li>\\n<li>state</li>\\n<li>parts of react app</li>\\n<li>some explanation or summary of jsx</li>\\n</ul>\\n<p>Function - name, params, body block</p>\\n<h3>Variable scope within and without blocks { }</h3>\\n<h3>Whiteboard- talk through all requirements, and pseudo code talk through your plan THEN begin coding.</h3>\\n<p>Ideally, You may be perceived as very knowledgeable, and not even have to finish the challenge depending on its length, as you’ve showcased what the interviewers <em>really</em> want to see in a potential new developer: an adaptable problem-solver with legitimate and valuable critical thinking skills.</p>\\n<ul>\\n<li>the main goal here is to demonstrate that you have the mental tools to handle a specific problem, so a very slight amount of hand waviness is acceptable implementation wise as long as you sandwich this with very concrete and clear knowledge and explanation.</li>\\n<li>having said that, things like the syntax of loops in your preferred coding language, the difference of use of if-statements and ternary expressions, as well as concepts in error handling look very good in a potential new hire.</li>\\n<li>in summary, if you are asked to explain an approach to a problem or using a particular type of algorithm it’s probably okay to gloss over syntax in this situation, as long as you are able to properly explain correct use of loops and statements and expressions when that question is the primary matter.</li>\\n</ul>\",\"fields\":{\"tagSlugs\":[\"/tags/web-development/\",\"/tags/interview-questions/\",\"/tags/fundamental-concepts/\",\"/tags/junior-developers/\"]},\"frontmatter\":{\"title\":\"Interview Questions and Concepts for Junior Developers\",\"tags\":[\"web development\",\"interview questions\",\"fundamental concepts\",\"junior developers\"],\"date\":\"2018-05-20T00:00:00.0Z\",\"description\":\"Whether or not the knowing the hottest new JS framework is the crux of winning the interview, there are some very fundamental concepts in web development that employers and senior devs want their juniors to have a solid grasp of.\"}}},\"pathContext\":{\"slug\":\"/posts/interview-questions-and-concepts-for-junior-developers/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-interview-questions-and-concepts-for-junior-developers-73aec57fb1842811c036.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Frank writes about code\",\"subtitle\":\"React/React Native/Typescript Developer, Golang hobbyist, jiujitsu player, foreign language aficionado\",\"copyright\":\"© MIT License\",\"author\":{\"name\":\"Frank Meza\",\"twitter\":\"frank_says_yeah\"},\"disqusShortname\":\"\",\"url\":\"https://frankmeza.github.io/\"}},\"markdownRemark\":{\"id\":\"/Users/macmini/Documents/projects/my_blog/frankmeza/src/pages/articles/2018-05-20---interview-questions-and-concepts-for-junior-developers/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>The scenario</h1>\\n<p>You got the interview. YES!! Yes, it’s <strong>that</strong> job you <strong>really</strong> want. </p>\\n<p>Hold on, this is only step one. You still have to show up on time, know what the interviewers are asking you, demonstrate this knowledge clearly, smell good and maybe even smile a little bit before they grant you Github access to their greenfield codebase with all the newest new things you’ve been reading about at Hacker Noon between writing cover letters and filling out job applications.  </p>\\n<p>Okay, so now how to prep?</p>\\n<h2>Algorithms</h2>\\n<p>which algorithm to study? There’s a lot on the internet about nightmare algorithm questions in a job interview, but I’ve not heard anyone I personally know ever have to do this. However, I don’t see how this can hurt. If it does come up, it’s generally less important to get an algorithm ‘100% right’than it is to thinking your way through it out loud to your interviewers.  </p>\\n<ul>\\n<li>\\n<p>Do you have a project to showcase? Awesome, this is good, be prepared to talk about the underlying concepts instead of tiny implementation details</p>\\n</li>\\n<li>\\n<p>which languages to put to the front of your knowledge? show, don’t tell. If you’re just entering the field, this is less applicable. Fear not - if in doubt, say something like “Given my current level of experience with code, I feel fairly comfortable with language X, but I’ll let you be the judge by asking me any questions about the language, or using that language to talk through concepts in programming.”</p>\\n</li>\\n<li>\\n<p>when I began learning to code, it was in Ruby primarily.  </p>\\n</li>\\n</ul>\\n<p>My first job in development was at a Rails/Backbone/CoffeScript shop, which was great for me at the time. Because I didn’t have to adjust to new syntax right away, I was able to continue my learning of writing object-oriented code within such a widely known MVC framework as Rails in one seemingly unending streak of Ruby classes, and Rails controllers and serializers.  </p>\\n<p>Later, I began to read about the features and approaches of other languages and paradigms. Functional programming began to interest me quite a bit, and I began to see the advantages of typed languages. Although Ruby on Rails isn’t really the best space to take advantage of these types of approaches, I was still able to take <em>full</em> advantage of the fundamental concepts that I picked up during all that time programming within a Ruby/Rails environment.  </p>\\n<p>Eventually, I accepted an offer working with a small and tight team, whose primary stack is a mostly-functional approach to Typescript/React/React-Native/Go. This is obviously a very different tech stack than Rails/Backbone/CoffeeScript. However, I was able to leverage my experience with Ruby methods and objects and classes (as well as a few things in CoffeeScript) to learning to code using Javascript’s functional parts: <em>map</em>, <em>filter</em>, and <em>reduce</em> among them, as well as newer ES6 features such as the spread operator and fat arrow functions.  </p>\\n<h2>Think twice before going all-in on a single framework</h2>\\n<p>Yes, the job posting may have mentioned so-many-years-experience in such-and-such a framework, but we all know that frameworks serve different purposes in different types of businesses, and also go in and out of use. The question becomes more like <em>can you learn to work with a new one?</em>  </p>\\n<p>This is what potential employers want to know… <em>can you keep up?</em> Are you able to take the <em>concepts</em> of programming with you into any coding situation you may find yourself in, and only then focus on implementation/syntax?</p>\\n<blockquote>\\n<p>Solid Pseudo code knows no single syntax.</p>\\n</blockquote>\\n<p>How can you prove that you know this? with a clear explanation of the underlying mechanics, which can only come from having a solid grasp of basic concepts.</p>\\n<h3>What Are these “basic concepts?”</h3>\\n<h3>REST</h3>\\n<p><strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer\\nread about HTTP in this <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\\\">overview by Mozilla</a></p>\\n<h3>HTTP</h3>\\n<ul>\\n<li>\\n<p><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP\\\">https://developer.mozilla.org/en-US/docs/Web/HTTP</a></p>\\n</li>\\n<li>\\n<p>the protocol itself - hypertext transfer protocol.</p>\\n</li>\\n<li>\\n<p>it might sound slightly archaic to need to know this, but in no way is this true. It’s always a good idea to know how your tools work. That knowledge is key to going beyond them when you have to, in a given situation.  </p>\\n</li>\\n</ul>\\n<h4>client, server relationship -</h4>\\n<ul>\\n<li>requests, responses, codes, body, et c.</li>\\n</ul>\\n<h3>What are the clients that will use server data?</h3>\\n<ul>\\n<li>web browser, mobile device</li>\\n<li>\\n<p>what will the client do with the data?</p>\\n<ul>\\n<li>render it through html/jsx markup</li>\\n</ul>\\n</li>\\n<li>Types of server data - XML, JSON, HTML</li>\\n</ul>\\n<h4>verbs</h4>\\n<ul>\\n<li>there are many but GET, POST, PUT, (PATCH), and DELETE are the most commonly used</li>\\n<li>\\n<p>Parts of a response from http verb <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\\\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods</a></p>\\n<ul>\\n<li>headers, body, json format</li>\\n<li>authentication from where?</li>\\n</ul>\\n</li>\\n<li>explain difference between JSON and Javascript Object, keys and values</li>\\n<li>other data</li>\\n</ul>\\n<h4>Status codes http</h4>\\n<ul>\\n<li>\\n<p>2XX Success</p>\\n</li>\\n<li>\\n<p>know the differences between 200, 201, 204</p>\\n</li>\\n<li>\\n<p>3XX Redirected</p>\\n</li>\\n<li>\\n<p>maybe know 302 and 304? don’t come up too often</p>\\n</li>\\n<li>\\n<p>4XX Failure</p>\\n</li>\\n<li>\\n<p>know 400, 401, 402, 403, 404, 422</p>\\n</li>\\n<li>\\n<p>5XX Server Error</p>\\n</li>\\n<li>\\n<p>maybe 500, 501, 504</p>\\n</li>\\n<li>\\n<p><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication\\\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication</a></p>\\n</li>\\n</ul>\\n<h3>Okay so now let’s talk about Which Languages, frameworks do you know and work with? Rate yourself 1-10</h3>\\n<h3>When in doubt with language X, use js instead, and…</h3>\\n<h3>javascript is still the lingua laborum, so know it</h3>\\n<ul>\\n<li>Describe parts of a JS function</li>\\n<li>function name</li>\\n<li>params</li>\\n<li>function body</li>\\n<li>return statement, value, possibly void/undefined</li>\\n</ul>\\n<h3>Variable and function scope in JS</h3>\\n<ul>\\n<li>const, let, var (hoisted) in closures and function scope</li>\\n<li>const/let do not leave their block { }</li>\\n</ul>\\n<h4>What is closure?</h4>\\n<h4>Call, bind, apply in JS</h4>\\n<h3>describe JS objects -</h3>\\n<ul>\\n<li>Key/values</li>\\n<li>Usually string as key, but what else can be used as a key?</li>\\n</ul>\\n<h3>Technical part of interview/whiteboarding</h3>\\n<ul>\\n<li>Whiteboard - small algorithm - input int, output string of square</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">const square = (input) {\\n    const line = &quot;&quot;;\\n    for (let i = 0; i &gt;= input; i++) {\\n        line.concat(&quot;x&quot;)\\n    }\\n\\n    for (let i = 0; i &gt;= input; i++) {\\n        console.log(line + \\\\n)\\n    }\\n}</code></pre>\\n      </div>\\n<h3>Web development basics -</h3>\\n<p>http, verbs, response, request, REST what and why, status codes, </p>\\n<h3>other</h3>\\n<ul>\\n<li>CSS selectors - </li>\\n</ul>\\n<h3>React</h3>\\n<ul>\\n<li>props</li>\\n<li>state</li>\\n<li>parts of react app</li>\\n<li>some explanation or summary of jsx</li>\\n</ul>\\n<p>Function - name, params, body block</p>\\n<h3>Variable scope within and without blocks { }</h3>\\n<h3>Whiteboard- talk through all requirements, and pseudo code talk through your plan THEN begin coding.</h3>\\n<p>Ideally, You may be perceived as very knowledgeable, and not even have to finish the challenge depending on its length, as you’ve showcased what the interviewers <em>really</em> want to see in a potential new developer: an adaptable problem-solver with legitimate and valuable critical thinking skills.</p>\\n<ul>\\n<li>the main goal here is to demonstrate that you have the mental tools to handle a specific problem, so a very slight amount of hand waviness is acceptable implementation wise as long as you sandwich this with very concrete and clear knowledge and explanation.</li>\\n<li>having said that, things like the syntax of loops in your preferred coding language, the difference of use of if-statements and ternary expressions, as well as concepts in error handling look very good in a potential new hire.</li>\\n<li>in summary, if you are asked to explain an approach to a problem or using a particular type of algorithm it’s probably okay to gloss over syntax in this situation, as long as you are able to properly explain correct use of loops and statements and expressions when that question is the primary matter.</li>\\n</ul>\",\"fields\":{\"tagSlugs\":[\"/tags/web-development/\",\"/tags/interview-questions/\",\"/tags/fundamental-concepts/\",\"/tags/junior-developers/\"]},\"frontmatter\":{\"title\":\"Interview Questions and Concepts for Junior Developers\",\"tags\":[\"web development\",\"interview questions\",\"fundamental concepts\",\"junior developers\"],\"date\":\"2018-05-20T00:00:00.0Z\",\"description\":\"Whether or not the knowing the hottest new JS framework is the crux of winning the interview, there are some very fundamental concepts in web development that employers and senior devs want their juniors to have a solid grasp of.\"}}},\"pathContext\":{\"slug\":\"/posts/interview-questions-and-concepts-for-junior-developers/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-interview-questions-and-concepts-for-junior-developers.json\n// module id = 383\n// module chunks = 277310182624144"],"sourceRoot":""}